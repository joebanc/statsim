#include "StdAfx.h"
#include "StatSimAPI.h"
#include ".\statsimadodb.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

//default connection string to dict.mdb
//LPCSTR strConnDICT = _T ("Provider=Microsoft.Jet.OLEDB.4.0;"\
//					  "Data Source=C:\\CBMSDatabase\\System\\dict.mdb;");

LPCSTR strConnDICT = _MBCS ("Driver={Microsoft Access Driver (*.mdb)};\
            Dbq=dict.mdb; DefaultDir=C:\\CBMSDatabase\\System;");

//default dict user
LPCSTR userConnDICT = _MBCS ("");

//default dict password
LPCSTR pwdConnDICT = _MBCS ("pep-cbms");

////////////////////////////////////////////////////////////////////////////////////
/*
LPCSTR strConnbak = _T ("Provider=Microsoft.Jet.OLEDB.4.0;"\
					  "Data Source=C:\\CBMSDatabase\\System\\StatSimCBMSbak.mdb;"\
					  "Jet OLEDB:Encrypt Database=True;");

LPCSTR strConn = _T ("Provider=Microsoft.Jet.OLEDB.4.0;"\
					  "Data Source=C:\\CBMSDatabase\\System\\StatSimCBMS.mdb;"\
					  "Jet OLEDB:Encrypt Database=True;");
//default user
LPCSTR userConn = _T ("");

//default password
LPCSTR pwdConn = _T ("");
*/
////////////////////////////////////////////////////////////////////////////////////
//CString SimDB = "C:\\CBMSDatabase\\System\\StatSimCBMS.mdb";
//CString SimDBbak = "C:\\CBMSDatabase\\System\\StatSimCBMSbak.mdb";
////////////////////////////////////////////////////////////////////////////////////

//MySQL Simulator Database connection
LPCSTR strConn = _MBCS("Driver={MySQL ODBC 3.51 Driver};\
			Server=localhost;Option=16834;\
			Database=StatSimCBMS;");

//default user
LPCSTR userConn = _MBCS ("root");

//default password
LPCSTR pwdConn = _MBCS ("pep-cbms");

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CStatSimADODB::CStatSimADODB()
{
/*
	pDBRS = new _RecordsetPtr;
	pDBConn = new _ConnectionPtr;
	pDBCmd = new _CommandPtr;
	pJE = new IJetEnginePtr;
	if(_heapchk()!=_HEAPOK) {
		DebugBreak();
	}
*/

	Connect();
//	ConstructDB();
}


CStatSimADODB::CStatSimADODB(LPCSTR Table)
{
/*
	pDBRS = new _RecordsetPtr;
	pDBConn = new _ConnectionPtr;
	pDBCmd = new _CommandPtr;
	pJE = new IJetEnginePtr;
*/
	Connect(Table, adLockReadOnly);
//	ConstructDB();
}

CStatSimADODB::CStatSimADODB(LPCSTR Table, ADODB::LockTypeEnum dbLockType)
{
/*
	pDBRS = new _RecordsetPtr;
	pDBConn = new _ConnectionPtr;
	pDBCmd = new _CommandPtr;
	pJE = new IJetEnginePtr;
*/
	Connect(Table, dbLockType);
//	ConstructDB();
}


CStatSimADODB::CStatSimADODB(LPCSTR custConn, LPCSTR custUser, LPCSTR custPwd)
{
/*
	pDBRS = new _RecordsetPtr;
	pDBConn = new _ConnectionPtr;
	pDBCmd = new _CommandPtr;
	pJE = new IJetEnginePtr;
*/
	Connect(custConn, custUser, custPwd);
}

CStatSimADODB::~CStatSimADODB()
{
	//AfxMessageBox ((LPCTSTR) "Destructed CBMS Simulator!");
/*
	delete pDBRS;
	pDBRS = NULL;

	delete pDBConn;
	pDBConn = NULL;

	delete pDBCmd;
	pDBCmd = NULL;

	delete pJE;
	pJE = NULL;
*/

}

void CStatSimADODB::Connect() 
{
	//UpdateData( TRUE );
	//open connection
	try 
	{
		pDBConn.CreateInstance (__uuidof(Connection));
		pDBConn->Open( strConn, userConn, pwdConn, adModeUnknown );	
	}

	catch(_com_error &e) 
	{
		_bstr_t bstrSource (e.Source());
		_bstr_t bstrDescription (e.Description());
		TRACE ( "Exception thrown for classes generated by #import" );
		TRACE ( "\tCode = %08lx\n", e.Error ());
		TRACE ( "\tCode meaning = %s\n", e.ErrorMessage ());
		TRACE ( "\tSource = %s\n", (LPCSTR) bstrSource);
		TRACE ( "\tDescription = %s\n", (LPCSTR) bstrDescription);

		AfxMessageBox ((LPCTSTR) bstrDescription);
	}
	//UpdateData( FALSE );
}

void CStatSimADODB::Connect(LPCSTR TargetTable, ADODB::LockTypeEnum dbLockType) 
{
	//UpdateData( TRUE );

	//open connection
	try
	{
		Connect();
				
		pDBCmd.CreateInstance (__uuidof (Command));
		pDBCmd->ActiveConnection = pDBConn;	// Formerly opened connection
                                            // pointer
		pDBCmd->CommandText = "SELECT * FROM " + (_bstr_t) TargetTable;

		pDBRS.CreateInstance (__uuidof (Recordset));
		pDBRS->CursorLocation = adUseClient;
		pDBRS->Open ( (IDispatch *) pDBCmd, vtMissing, adOpenStatic,
				dbLockType, adCmdUnknown);

		RecCount = pDBRS->GetRecordCount();
		FldCount = pDBRS->GetFields()->GetCount();
	}

	catch(_com_error &e) 
	{
		
		_bstr_t bstrSource (e.Source());
		_bstr_t bstrDescription (e.Description());
		TRACE ( "Exception thrown for classes generated by #import" );
		TRACE ( "\tCode = %08lx\n", e.Error ());
		TRACE ( "\tCode meaning = %s\n", e.ErrorMessage ());
		TRACE ( "\tSource = %s\n", (LPCSTR) bstrSource);
		TRACE ( "\tDescription = %s\n", (LPCSTR) bstrDescription);

		AfxMessageBox ((LPCTSTR) bstrDescription);
	}

	//UpdateData( FALSE );
}


//Constructor for custom connections
///////////////////////////////////////////////////////////////////////////////////
void CStatSimADODB::Connect(LPCSTR currConn, LPCSTR currUser, LPCSTR currPwd) 
{
	//UpdateData( TRUE );
	//open connection
	try 
	{
		pDBConn.CreateInstance (__uuidof(Connection));
		pDBConn->Open ( currConn, currUser, currPwd, adModeUnknown);	
	}

	catch(_com_error &e) 
	{
		_bstr_t bstrSource (e.Source());
		_bstr_t bstrDescription (e.Description());
		TRACE ( "Exception thrown for classes generated by #import" );
		TRACE ( "\tCode = %08lx\n", e.Error ());
		TRACE ( "\tCode meaning = %s\n", e.ErrorMessage ());
		TRACE ( "\tSource = %s\n", (LPCSTR) bstrSource);
		TRACE ( "\tDescription = %s\n", (LPCSTR) bstrDescription);

		AfxMessageBox ((LPCTSTR) bstrDescription);
	}
	//UpdateData( FALSE );
}
///////////////////////////////////////////////////////////////////////////////////

void CStatSimADODB::OpenQuery(LPCSTR sSQL) 
{
	//UpdateData( TRUE );

	//open connection
	try
	{				
		pDBCmd.CreateInstance (__uuidof (Command));
		pDBCmd->ActiveConnection = pDBConn;	// Formerly opened connection
                                            // pointer
		pDBCmd->CommandText = sSQL;

		pDBRS.CreateInstance (__uuidof (Recordset));
		pDBRS->CursorLocation = adUseClient;
		pDBRS->Open ( (IDispatch *) pDBCmd, vtMissing, adOpenStatic,
				adLockReadOnly, adCmdUnknown);

		RecCount = pDBRS->GetRecordCount();
		FldCount = pDBRS->GetFields()->GetCount();
	}

	catch(_com_error &e) 
	{
		
		_bstr_t bstrSource (e.Source());
		_bstr_t bstrDescription (e.Description());
		TRACE ( "Exception thrown for classes generated by #import" );
		TRACE ( "\tCode = %08lx\n", e.Error ());
		TRACE ( "\tCode meaning = %s\n", e.ErrorMessage ());
		TRACE ( "\tSource = %s\n", (LPCSTR) bstrSource);
		TRACE ( "\tDescription = %s\n", (LPCSTR) bstrDescription);

		AfxMessageBox ((LPCTSTR) bstrDescription);
	}

	//UpdateData( FALSE );
}

void CStatSimADODB::OpenQuery(LPCSTR sSQL, ADODB::LockTypeEnum dbLockType) 
{
	//UpdateData( TRUE );

	//open connection
	try
	{				
		pDBCmd.CreateInstance (__uuidof (Command));
		pDBCmd->ActiveConnection = pDBConn;	// Formerly opened connection
                                            // pointer
		pDBCmd->CommandText = sSQL;

		pDBRS.CreateInstance (__uuidof (Recordset));
		pDBRS->CursorLocation = adUseClient;
		pDBRS->Open ( (IDispatch *) pDBCmd, vtMissing, adOpenStatic,
				dbLockType, adCmdUnknown);

		RecCount = pDBRS->GetRecordCount();
		FldCount = pDBRS->GetFields()->GetCount();
	}

	catch(_com_error &e) 
	{
		
		_bstr_t bstrSource (e.Source());
		_bstr_t bstrDescription (e.Description());
		TRACE ( "Exception thrown for classes generated by #import" );
		TRACE ( "\tCode = %08lx\n", e.Error ());
		TRACE ( "\tCode meaning = %s\n", e.ErrorMessage ());
		TRACE ( "\tSource = %s\n", (LPCSTR) bstrSource);
		TRACE ( "\tDescription = %s\n", (LPCSTR) bstrDescription);

		AfxMessageBox ((LPCTSTR) bstrDescription);
	}

	//UpdateData( FALSE );
}

void CStatSimADODB::ExecQuery(LPCSTR sSQLExec) 
{
	try
	{
		VARIANT * RecAffect = new VARIANT;	
		pDBConn->Execute((_bstr_t) sSQLExec, (VARIANT*) RecAffect, adCmdUnknown);
		delete RecAffect;
		RecAffect = NULL;
	}

	catch(_com_error &e) 
	{
		
		_bstr_t bstrSource (e.Source());
		_bstr_t bstrDescription (e.Description());
		TRACE ( "Exception thrown for classes generated by #import" );
		TRACE ( "\tCode = %08lx\n", e.Error ());
		TRACE ( "\tCode meaning = %s\n", e.ErrorMessage ());
		TRACE ( "\tSource = %s\n", (LPCSTR) bstrSource);
		TRACE ( "\tDescription = %s\n", (LPCSTR) bstrDescription);

		//AfxMessageBox ((LPCTSTR) bstrDescription);
	}

}

void CStatSimADODB::AddHHRecords(CString fromPath)
{
	fromPath.Replace( _T("\\"), _T("/") );
	
	CString sSQLExec = _T("LOAD DATA INFILE '") + fromPath +
		_T("' INTO TABLE qnr_hh ") +
		_T("FIELDS TERMINATED BY '' ") +
		_T("LINES TERMINATED BY '\\r\\n';");

	ExecQuery( ConstChar(sSQLExec) );

	DeleteRecords(_T("qnr_hh"), _T("rtype"), _T("1"));

}

void CStatSimADODB::AddMemRecords(CString fromPath)
{
	fromPath.Replace( _T("\\"), _T("/") );
	
	CString sSQLExec = _T("LOAD DATA INFILE '") + fromPath +
		_T("' INTO TABLE qnr_mem ") +
		_T("FIELDS TERMINATED BY '' ") +
		_T("LINES TERMINATED BY '\\r\\n';");

	ExecQuery( ConstChar(sSQLExec) );
	DeleteRecords(_T("qnr_mem"), _T("rtype"), _T("2"));

}

void CStatSimADODB::AddRecords(_RecordsetPtr fromRS)
{
	if (RecCount > 0)
	{
		pDBRS->MoveFirst();
		pDBRS->MoveLast();
	}

	if (fromRS->GetRecordCount() > 0)
	{
		fromRS->MoveLast();
		fromRS->MoveFirst();
	}

	try
	{
		//Check if new succeeded and we got a valid pointer to a dialog object
		/*
		if(m_pPBDlg != NULL) {
			BOOL ret = m_pPBDlg->Create();
			if(!ret) {	//Create failed.
				AfxMessageBox(_T("Error creating Dialog");			
			}
			m_pPBDlg->ShowWindow(SW_SHOW);
			m_pPBDlg->BeginModalState();
		}
		else {
			AfxMessageBox(_T("Error Creating Dialog Object");
		}
		*/
				
		CString pbCaption;	//Caption for processing...
		if (pProgCtrl!=NULL) 
			pProgCtrl->SetRange(1, fromRS->GetRecordCount());

		
		for (long i=0; i<fromRS->GetRecordCount(); i++)
		{	
			//int procPercent = ((i+1)/(fromRS->GetRecordCount())) * 100;
			
			pbCaption.Format(_T("Importing record %d of %d..."), (i+1), 
				(fromRS->GetRecordCount()));
			
			if (pWnd!=NULL) 
				pWnd->SetWindowText( pbCaption );
			
			if (pProgCtrl!=NULL) 
				pProgCtrl->SetPos(i+1);			
				
			
			pDBRS->AddNew();	//add cases
			for (long j=0; j<fromRS->GetFields()->GetCount(); j++)
			{
				_variant_t currVal;
				currVal = fromRS->Fields->GetItem(long(j))->GetValue();
				pDBRS->Fields->GetItem(long(j))->PutValue(currVal);
			}
			pDBRS->MoveNext();
			fromRS->MoveNext();
		}

	}
	
	catch(_com_error &e) 
	{		
		_bstr_t bstrSource (e.Source());
		_bstr_t bstrDescription (e.Description());
		TRACE ( "Exception thrown for classes generated by #import" );
		TRACE ( "\tCode = %08lx\n", e.Error ());
		TRACE ( "\tCode meaning = %s\n", e.ErrorMessage ());
		TRACE ( "\tSource = %s\n", (LPCSTR) bstrSource);
		TRACE ( "\tDescription = %s\n", (LPCSTR) bstrDescription);

		AfxMessageBox ((LPCTSTR) bstrDescription);
	}

}

void CStatSimADODB::AddRecords(_RecordsetPtr fromRS, CString TargetTable)
{
	USES_CONVERSION;
	if (RecCount > 0)
	{
		pDBRS->MoveFirst();
		pDBRS->MoveLast();
	}

	if (fromRS->GetRecordCount() > 0)
	{
		fromRS->MoveLast();
		fromRS->MoveFirst();
	}


	try
	{
		CString pbCaption;	//Caption for processing...
		if (pProgCtrl!=NULL) 
			pProgCtrl->SetRange(1, fromRS->GetRecordCount());

		CString sSQLExec, sSQLIns, sSQLVal;
		_variant_t currVal;
		_bstr_t strVal, fldName;

		sSQLIns = _T("INSERT INTO ") + TargetTable + _T("(");
		sSQLVal = _T("VALUES (");
		
		for (long i=0; i<fromRS->GetRecordCount(); i++)
		{	
			pbCaption.Format(_T("Importing record %d of %d..."), (i+1), 
				(fromRS->GetRecordCount()));

			if (pWnd!=NULL) 
				pWnd->SetWindowText( pbCaption );
			
			if (pProgCtrl!=NULL) 
				pProgCtrl->SetPos(i+1);			
			
			for (long j=13; j<fromRS->GetFields()->GetCount(); j++) {	//add cases
				currVal = fromRS->Fields->GetItem(long(j))->GetValue();
				fldName = fromRS->Fields->GetItem(long(j))->GetName();
				strVal = currVal.operator _bstr_t();
				
				if (j == (fromRS->GetFields()->GetCount() - 1)) {
					sSQLIns = sSQLIns + (CString) OLE2CA(fldName) + _T(") ");
					sSQLVal = sSQLVal + (CString) OLE2CA(strVal) + _T(");");
				}
				else {
					sSQLIns = sSQLIns + (CString) OLE2CA(fldName) + _T(", ");
					sSQLVal = sSQLVal + (CString) OLE2CA(strVal) + _T(", ");
				}
				sSQLExec = sSQLIns + sSQLVal;			
				AfxMessageBox (sSQLExec);
			}
			
			sSQLExec = sSQLIns + sSQLVal;			
			AfxMessageBox (sSQLExec);

			/*long * RecAffect = new long;	
			pDBConn->Execute((_bstr_t) sSQLExec, (VARIANT*) RecAffect, adCmdUnknown);
			delete RecAffect;

			pDBRS->MoveLast();
			fromRS->MoveNext();
			*/

		}
	}
	
	catch(_com_error &e) 
	{		
		_bstr_t bstrSource (e.Source());
		_bstr_t bstrDescription (e.Description());
		TRACE ( "Exception thrown for classes generated by #import" );
		TRACE ( "\tCode = %08lx\n", e.Error ());
		TRACE ( "\tCode meaning = %s\n", e.ErrorMessage ());
		TRACE ( "\tSource = %s\n", (LPCSTR) bstrSource);
		TRACE ( "\tDescription = %s\n", (LPCSTR) bstrDescription);

		AfxMessageBox (bstrDescription);
	}

}

void CStatSimADODB::ExportRecords(CString sSQL, CString targetPath)
{
	OpenQuery(ConstChar(sSQL));

	if (RecCount > 0)
	{
		pDBRS->MoveLast();
		pDBRS->MoveFirst();
	}

	try {

		CString pbCaption;	//Caption for processing...
		if (pProgCtrl!=NULL) 
			pProgCtrl->SetRange(1, pDBRS->GetRecordCount());

		_bstr_t printVal;
		_variant_t currVal;
		long i, j;
		
		FILE* pFile = _tfopen( targetPath, _T("w"));
		
		if (pFile != NULL) {
			//print field names
			for (j=0; j<pDBRS->GetFields()->GetCount(); j++) {
				printVal = pDBRS->Fields->GetItem(long(j))->GetName();
				fprintf(pFile, printVal + "\t");
			}
			fprintf(pFile, "\n"); //new line

			//print records
			for (i=0; i<pDBRS->GetRecordCount(); i++) {			
				
				pbCaption.Format(_T("Exporting record %d of %d..."), (i+1), 
					(pDBRS->GetRecordCount()));
				
				if (pWnd!=NULL) 
					pWnd->SetWindowText( pbCaption );
				
				if (pProgCtrl!=NULL) 
					pProgCtrl->SetPos(i+1);			
				
				for (j=0; j<pDBRS->GetFields()->GetCount(); j++) {
					
					currVal = pDBRS->Fields->GetItem(long(j))->GetValue();
					printVal = currVal;
					fprintf(pFile, printVal + "\t");
				}
				fprintf(pFile, "\n"); //new line
				pDBRS->MoveNext();
			}
			fclose(pFile);
		}

		else {
			AfxMessageBox(_T("Error writing to the file"));
		}
	}
	
	catch(_com_error &e) 
	{		
		_bstr_t bstrSource (e.Source());
		_bstr_t bstrDescription (e.Description());
		TRACE ( "Exception thrown for classes generated by #import" );
		TRACE ( "\tCode = %08lx\n", e.Error ());
		TRACE ( "\tCode meaning = %s\n", e.ErrorMessage ());
		TRACE ( "\tSource = %s\n", (LPCSTR) bstrSource);
		TRACE ( "\tDescription = %s\n", (LPCSTR) bstrDescription);

		AfxMessageBox (bstrDescription);
	}

}

void CStatSimADODB::OpenQuery(CString TargetTable, CString CritFld, CString CritVal)
{
	
	CString sSQLExec = _T("SELECT * FROM ") + TargetTable 
		+ _T(" WHERE (((") + CritFld + _T(")=") + CritVal + _T("));");

	OpenQuery( ConstChar(sSQLExec) );

}

void CStatSimADODB::DeleteRecords(CString TargetTable, CString CritFld, CString CritVal)
{
	
	CString sSQLExec = _T("DELETE FROM ") + TargetTable 
		+ _T(" WHERE (((") + CritFld + _T(")=") + CritVal + _T("));");

	ExecQuery( ConstChar(sSQLExec) );

}

void CStatSimADODB::DeleteRecords(CString TargetTable)
{
	CString sSQLExec = _T("DELETE FROM ") + TargetTable + _T(";");

	ExecQuery( ConstChar(sSQLExec) );

}

void CStatSimADODB::CreateTable(_RecordsetPtr fromRS, CString TableName)
{
	CString strMessageText;

	try
	{	
		CString sSQLExec, sfldType;
		_bstr_t fldName;
		int fldType;
		long fldSize;

		sSQLExec = _T("CREATE TABLE IF NOT EXISTS ") + TableName + _T(" (");

		for (long j=0; j<fromRS->GetFields()->GetCount(); j++)
		{

			fldName = fromRS->Fields->GetItem(long(j))->GetName();
			fldType = fromRS->Fields->GetItem(long(j))->GetType();
			fldSize = fromRS->Fields->GetItem(long(j))->GetDefinedSize();
						
			
			if (fldType == 2) {
				sfldType = "INT";
			}
			else if (fldType == 3) {
				sfldType = "INT";
			}
			else if (fldType == 21) {
				sfldType = "FLOAT";
			}
			else if (fldType == 200) {
				sfldType = "TEXT";
			}
			else if (fldType == 201) {
				sfldType = "TEXT";
			}
			else if (fldType == 202) {
				sfldType = "TEXT";
			}
			
			if (j == (fromRS->GetFields()->GetCount() - 1)) {
				//sSQLExec = sSQLExec + "[" + (LPCSTR) fldName + "] " + sfldType + ");";
				sSQLExec = sSQLExec + (LPCSTR) fldName + _T(" ") + sfldType + _T(");");	//"(" + (LPCSTR) fldSize + "));";
			}
			else {
				//sSQLExec = sSQLExec + "[" + (LPCSTR) fldName + "] " + sfldType + ",";
				sSQLExec = sSQLExec + (LPCSTR) fldName + _T(" ") + sfldType + _T(", ");	//"(" + (LPCSTR) fldSize + "),";
			}			
			//strMessageText.Format("Type: %d", fldType);
			//AfxMessageBox ((LPCTSTR) strMessageText);
		}
		
		//AfxMessageBox ((LPCTSTR) sSQLExec);
		
		long * RecAffect = new long;	
		pDBConn->Execute((_bstr_t) sSQLExec, (VARIANT*) RecAffect, adCmdUnknown);
		delete RecAffect;
		RecAffect = NULL;

	}
	
	catch(_com_error &e) 
	{		
		_bstr_t bstrSource (e.Source());
		_bstr_t bstrDescription (e.Description());
		TRACE ( "Exception thrown for classes generated by #import" );
		TRACE ( "\tCode = %08lx\n", e.Error ());
		TRACE ( "\tCode meaning = %s\n", e.ErrorMessage ());
		TRACE ( "\tSource = %s\n", (LPCSTR) bstrSource);
		TRACE ( "\tDescription = %s\n", (LPCSTR) bstrDescription);

		//AfxMessageBox ((LPCTSTR) bstrDescription);
	}

}



void CStatSimADODB::ConnectToDict(CString TableName)
{
	try {
		
		pDictConn.CreateInstance (__uuidof(Connection));
		pDictConn->Open ( strConnDICT, userConnDICT, pwdConnDICT, adModeUnknown );	
			
		pDictCmd.CreateInstance (__uuidof (Command));
		pDictCmd->ActiveConnection = pDictConn;	// Formerly opened connection                                           
		pDictCmd->CommandText = "SELECT * FROM " + (_bstr_t) TableName;	// pointer
	
		pDictRS.CreateInstance (__uuidof (Recordset));
		pDictRS->CursorLocation = adUseClient;
		pDictRS->Open ( (IDispatch *) pDictCmd, vtMissing, adOpenStatic,
			adLockOptimistic, adCmdUnknown);
		
		dictRecCount = pDictRS->GetRecordCount();
		dictFldCount = pDictRS->GetFields()->GetCount();
	}

	catch(_com_error &e) 
	{
		
		_bstr_t bstrSource (e.Source());
		_bstr_t bstrDescription (e.Description());
		TRACE ( "Exception thrown for classes generated by #import" );
		TRACE ( "\tCode = %08lx\n", e.Error ());
		TRACE ( "\tCode meaning = %s\n", e.ErrorMessage ());
		TRACE ( "\tSource = %s\n", (LPCSTR) bstrSource);
		TRACE ( "\tDescription = %s\n", (LPCSTR) bstrDescription);

		AfxMessageBox ((LPCTSTR) bstrDescription);
	}

}

void CStatSimADODB::TransferTable(CString fromTable, CString toTable)
{
	try {	
		CString strSQL;
		ConnectToDict(fromTable);
		CreateTable(pDictRS, toTable);
		OpenQuery( ConstChar(_T("SELECT * FROM ") + toTable + _T(";")), adLockOptimistic);
		if (dictRecCount != RecCount) {		//test if dissimilar recordset
			//drop the table
			strSQL = _T("DROP TABLE ") + toTable + _T(";");
			ExecQuery( ConstChar(strSQL) );
			
			//recreate/open table
			CreateTable(pDictRS, toTable);
			OpenQuery( ConstChar(_T("SELECT * FROM ") + toTable + _T(";")), adLockOptimistic);
			AddRecords(pDictRS);
			
			//rename muna as temporary
			strSQL = _T("RENAME TABLE ") + toTable + _T(" TO _") + toTable + _T("_;");
			ExecQuery( ConstChar(strSQL) );
		}
	}
	catch(_com_error &e) 
	{
		
		_bstr_t bstrSource (e.Source());
		_bstr_t bstrDescription (e.Description());
		TRACE ( "Exception thrown for classes generated by #import" );
		TRACE ( "\tCode = %08lx\n", e.Error ());
		TRACE ( "\tCode meaning = %s\n", e.ErrorMessage ());
		TRACE ( "\tSource = %s\n", (LPCSTR) bstrSource);
		TRACE ( "\tDescription = %s\n", (LPCSTR) bstrDescription);

		AfxMessageBox ((LPCTSTR) bstrDescription);
	}
}

/*

void CStatSimADODB::ConstructDB(CString fileExt)
{
	try {
		CString strSQL;
		
		TransferTable("~hElement", "~hElement");
		
		//create the table of ~hElement
		strSQL = _T("CREATE TABLE IF NOT EXISTS ~hElement \n"\
			"SELECT * from _~hElement_;");
		
		ExecQuery(strSQL);
		
		strSQL = _T("ALTER TABLE ~hElement \n"\
			"ADD PRIMARY KEY (ID);");

		ExecQuery(strSQL);

		CPerson * pPerson = new CPerson();
		pPerson->CreateTable(); //creator of member records

		delete pPerson;
		pPerson = NULL;

		CHousehold * pHousehold = new CHousehold();	
		pHousehold->CreateTable(); //creator of household records
		
		delete pHousehold;
		pHousehold = NULL;

		CCountry * pCountry = new CCountry();	
		pCountry->CreateTable(fileExt); //creator of country records

		delete pCountry;
		pCountry = NULL;

		//regn
		CRegion * pRegion = new CRegion();	
		pRegion->CreateTable(fileExt); //creator of region records
		
		delete pRegion;
		pRegion = NULL;

		//prov
		CProvince * pProvince = new CProvince();	
		pProvince->CreateTable(fileExt); //creator of province records
		
		delete pProvince;
		pProvince = NULL;

		//mun		
		CMunicipalityCity * pMunicipalityCity = new CMunicipalityCity();	
		pMunicipalityCity->CreateTable(fileExt); //creator of municipality records
		
		delete pMunicipalityCity;
		pMunicipalityCity = NULL;

		//brgy	
		CBarangay * pBarangay = new CBarangay();	
		pBarangay->CreateTable(fileExt); //creator of barangay records

		delete pBarangay;
		pBarangay = NULL;

		//make table of puroks in construction since there could be inconsistencies
		//default is empty
		CPurok * pPurok = new CPurok();	
		pPurok->CreateTable(); //creator of purok records
		
		delete pPurok;
		pPurok = NULL;

		//drop temporary tables
		strSQL = _T("DROP TABLE IF EXISTS _country_, _regn_, _prov_, _mun_, _brgy_, _~hElement_;");
		ExecQuery(strSQL);

	}
	
	catch(_com_error &e) 
	{
		
		_bstr_t bstrSource (e.Source());
		_bstr_t bstrDescription (e.Description());
		TRACE ( "Exception thrown for classes generated by #import" );
		TRACE ( "\tCode = %08lx\n", e.Error ());
		TRACE ( "\tCode meaning = %s\n", e.ErrorMessage ());
		TRACE ( "\tSource = %s\n", (LPCSTR) bstrSource);
		TRACE ( "\tDescription = %s\n", (LPCSTR) bstrDescription);

		AfxMessageBox ((LPCTSTR) bstrDescription);
	}


}

void CStatSimADODB::ConfigDB()
{
	CRegion * pRegion = new CRegion();	//Region
	CProvince * pProvince = new CProvince();	//Province
	CMunicipalityCity * pMunicipalityCity  = new CMunicipalityCity();	//Municipality
	CBarangay * pBarangay = new CBarangay();	//Barangay

	pBarangay->ConfigTable();
	pMunicipalityCity->ConfigTable();
	pProvince->ConfigTable();
	pRegion->ConfigTable();

	delete pBarangay;
	pBarangay = NULL;
	delete pMunicipalityCity ;
	pMunicipalityCity  = NULL;
	delete pProvince;			
	pProvince = NULL;
	delete pRegion;
	pRegion = NULL;


}
*/
/*
void CStatSimADODB::CompactDB()
{
	try {

		if (pDBConn->Close()) 
		{
			pDBConn->Close();
		}

		pJE.CreateInstance (__uuidof(JetEngine));
		pJE->CompactDatabase(strConn, strConnbak);
		remove((LPCSTR) SimDB);
		rename((LPCSTR) SimDBbak, (LPCSTR) SimDB);
	}
	
	catch(_com_error &e) 
	{
		
		_bstr_t bstrSource (e.Source());
		_bstr_t bstrDescription (e.Description());
		TRACE ( "Exception thrown for classes generated by #import" );
		TRACE ( "\tCode = %08lx\n", e.Error ());
		TRACE ( "\tCode meaning = %s\n", e.ErrorMessage ());
		TRACE ( "\tSource = %s\n", (LPCSTR) bstrSource);
		TRACE ( "\tDescription = %s\n", (LPCSTR) bstrDescription);

		AfxMessageBox ((LPCTSTR) bstrDescription);
	}

}
*/
